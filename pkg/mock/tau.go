// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirillMironov/tau/runtimes (interfaces: ContainerRuntime)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	runtimes "github.com/KirillMironov/tau/runtimes"
	gomock "github.com/golang/mock/gomock"
)

// MockContainerRuntime is a mock of ContainerRuntime interface.
type MockContainerRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRuntimeMockRecorder
}

// MockContainerRuntimeMockRecorder is the mock recorder for MockContainerRuntime.
type MockContainerRuntimeMockRecorder struct {
	mock *MockContainerRuntime
}

// NewMockContainerRuntime creates a new mock instance.
func NewMockContainerRuntime(ctrl *gomock.Controller) *MockContainerRuntime {
	mock := &MockContainerRuntime{ctrl: ctrl}
	mock.recorder = &MockContainerRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRuntime) EXPECT() *MockContainerRuntimeMockRecorder {
	return m.recorder
}

// Remove mocks base method.
func (m *MockContainerRuntime) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockContainerRuntimeMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockContainerRuntime)(nil).Remove), arg0)
}

// Start mocks base method.
func (m *MockContainerRuntime) Start(arg0 runtimes.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockContainerRuntimeMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContainerRuntime)(nil).Start), arg0)
}

// State mocks base method.
func (m *MockContainerRuntime) State(arg0 string) (runtimes.ContainerState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", arg0)
	ret0, _ := ret[0].(runtimes.ContainerState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockContainerRuntimeMockRecorder) State(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockContainerRuntime)(nil).State), arg0)
}

// Stop mocks base method.
func (m *MockContainerRuntime) Stop(arg0 string, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockContainerRuntimeMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockContainerRuntime)(nil).Stop), arg0, arg1)
}
