// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/resources.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourcesClient is the client API for Resources service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesClient interface {
	Create(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Descriptor, opts ...grpc.CallOption) (*Status, error)
	Remove(ctx context.Context, in *Descriptor, opts ...grpc.CallOption) (*Response, error)
}

type resourcesClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesClient(cc grpc.ClientConnInterface) ResourcesClient {
	return &resourcesClient{cc}
}

func (c *resourcesClient) Create(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Resources/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Get(ctx context.Context, in *Descriptor, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/api.Resources/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Remove(ctx context.Context, in *Descriptor, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Resources/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesServer is the server API for Resources service.
// All implementations should embed UnimplementedResourcesServer
// for forward compatibility
type ResourcesServer interface {
	Create(context.Context, *Resource) (*Response, error)
	Get(context.Context, *Descriptor) (*Status, error)
	Remove(context.Context, *Descriptor) (*Response, error)
}

// UnimplementedResourcesServer should be embedded to have forward compatible implementations.
type UnimplementedResourcesServer struct {
}

func (UnimplementedResourcesServer) Create(context.Context, *Resource) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourcesServer) Get(context.Context, *Descriptor) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourcesServer) Remove(context.Context, *Descriptor) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

// UnsafeResourcesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServer will
// result in compilation errors.
type UnsafeResourcesServer interface {
	mustEmbedUnimplementedResourcesServer()
}

func RegisterResourcesServer(s grpc.ServiceRegistrar, srv ResourcesServer) {
	s.RegisterService(&Resources_ServiceDesc, srv)
}

func _Resources_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Resources/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Create(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Descriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Resources/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Get(ctx, req.(*Descriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Descriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Resources/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Remove(ctx, req.(*Descriptor))
	}
	return interceptor(ctx, in, info, handler)
}

// Resources_ServiceDesc is the grpc.ServiceDesc for Resources service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resources_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Resources",
	HandlerType: (*ResourcesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Resources_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Resources_Get_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Resources_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/resources.proto",
}
